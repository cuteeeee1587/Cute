local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Settings
local transferInterval = 0.1 -- time between teleports
local offset = Vector3.new(5, 0, 0) -- offset next to enemy (optional)

-- Skill settings
local skillIds = {200560, 200561, 200562, 200563}
local skillCooldown = 5 -- seconds per skill
local lastSkillTimes = {}

-- Variables
local player = Players.LocalPlayer
local enemiesFolder = workspace:WaitForChild("Enemys")
local playerChar = player.Character or player.CharacterAdded:Wait()
local playerHRP = playerChar:WaitForChild("HumanoidRootPart")
local enemyDeathEvent = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("EnemyDeath")
local playerRespirationSkillAttack = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PlayerRespirationSkillAttack")
local playerClickAttackSkill = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PlayerClickAttackSkill")

local visited = {}
local enemyDied = true
local transferTimer = 0
local currentTarget = nil
local attackCooldown = 0.01 -- attack cooldown
local attackTimer = 0
local stuckTimer = 0 -- Timer to track how long we've been stuck on the same target

-- Functions
local function teleportToEnemy(enemy)
    local hrp = enemy:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    playerHRP.CFrame = hrp.CFrame * CFrame.new(offset)
end

local function getUnvisitedTarget()
    local unvisited = {}
    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        local enemyGuid = enemy:GetAttribute("EnemyGuid")
        if enemyGuid and not visited[enemyGuid] then
            table.insert(unvisited, enemy)
        end
    end

    if #unvisited == 0 then
        visited = {}
        return getUnvisitedTarget()
    end

    return unvisited[math.random(1, #unvisited)]
end

local function useSkillsOnEnemy(enemy)
    local enemyGuid = enemy:GetAttribute("EnemyGuid")
    if not enemyGuid then return end

    -- Click attack
    playerClickAttackSkill:FireServer({
        ["attackEnemyGUID"] = enemyGuid
    })

    -- Skill attacks
    for _, skillId in ipairs(skillIds) do
        local lastUsed = lastSkillTimes[skillId] or 0
        if tick() - lastUsed >= skillCooldown then
            playerRespirationSkillAttack:InvokeServer({
                ["enemyGuid"] = enemyGuid,
                ["respirationType"] = 3,
                ["skillId"] = skillId
            })
            lastSkillTimes[skillId] = tick()
        end
    end
end

local function onEnemyDeath()
    enemyDied = true
    stuckTimer = 0 -- Reset stuck timer when enemy dies
end

local function onCharacterRespawn(char)
    playerChar = char
    playerHRP = char:WaitForChild("HumanoidRootPart")
    enemyDied = true
    stuckTimer = 0 -- Reset stuck timer upon respawn
    print("Respawn detected. Script continued!")
end

-- Connections
enemyDeathEvent.OnClientEvent:Connect(onEnemyDeath)
player.CharacterAdded:Connect(onCharacterRespawn)

-- Main loop
RunService.Heartbeat:Connect(function(dt)
    if attackTimer > 0 then
        attackTimer = attackTimer - dt -- count down attack cooldown
    end

    transferTimer += dt
    stuckTimer += dt -- Increment stuck timer

    -- Check if stuck on the same target for too long (1 second)
    if stuckTimer > 1 and currentTarget then
        print("Stuck on target for too long, moving to next target.")
        enemyDied = true
        stuckTimer = 0
    end

    if transferTimer >= transferInterval and enemyDied then
        local target = getUnvisitedTarget()
        if target then
            teleportToEnemy(target)
            local targetGuid = target:GetAttribute("EnemyGuid")
            if targetGuid then
                visited[targetGuid] = true
            end
            enemyDied = false
            currentTarget = target
            stuckTimer = 0 -- Reset stuck timer when a new target is found
        end
        transferTimer = 0
    end

    -- Only attack if enough time has passed
    if currentTarget and currentTarget.Parent and attackTimer <= 0 then
        useSkillsOnEnemy(currentTarget)
        attackTimer = attackCooldown -- reset attack timer
    elseif not (currentTarget and currentTarget.Parent) then
        currentTarget = nil
    end
end)
