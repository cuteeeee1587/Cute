local mod = loadstring(game:HttpGet("https://raw.githubusercontent.com/deeeity/mercury-lib/master/src.lua"))()
local Serika = {
			Main = Color3.fromRGB(50, 52, 55),
			Secondary = Color3.fromRGB(80, 82, 85),
			Tertiary = Color3.fromRGB(226, 183, 20),

			StrongText = Color3.fromHSV(0, 0, 1),		
			WeakText = Color3.fromHSV(0, 0, 172/255)
		}

local wndw = mod:Create{
    Name = "Cuteeeee HUB <3",
    Size = UDim2.fromOffset(600, 400),
    Theme = Serika,  -- Use manually defined Aqua theme
}

local T1 = wndw:Tab{
    Name = "Main",
    Icon = "rbxassetid://8569322835"
}

local T2 = wndw:Tab{
    Name = "Auto Farm",
    Icon = "rbxassetid://8569322835"
}


local T3 = wndw:Tab{
    Name = "Teleport",
    Icon = "rbxassetid://8569322835"
}


local T4 = wndw:Tab{
    Name = "Machineee and Egg",
    Icon = "rbxassetid://8569322835"
}


local player = game.Players.LocalPlayer
local playerChar = workspace:WaitForChild(player.Name)
local playerHRP = playerChar:WaitForChild("HumanoidRootPart")
local goldsFolder = workspace:WaitForChild("Golds")
local workspace = game:GetService("Workspace")
local cg = game:GetService("CoreGui")
local player = {
  self = game:GetService("Players").LocalPlayer,
  all = game:GetService("Players")
}


local var = {
    click = true,
    atk = false,
    on = false,
    bw = false,
    cs = false,
    spin = false,
    reb = false,
    egg = {
      id = 0,
      count = 3,
      toggle = false
    },
    bh = false,
    task = {
      claim = false,
      ach = false,
      id = 0
    },
    hero = {
      index = 1,
      skill = true,
      guid = "null",
      id = 0,
      ft = false,
      ft2 = false
    },
    forge = {
      guid = "null",
      toggle = false
    },
    mapid = 50001,
    fuse = false,
    atk2 = false,
    bring = false,
    atk3 = false,
    raid = {
      table = {"Room1","Room2","Room3","Room4"},
      s = "Room1",
      diff = 1,
      mapid = 0,
      toggle = false,
      dtable = {"1","2","3","4"}
    },
    dc = false,
    fraid = false,
    cgroup = false,
    machine = {
      table = {"Mask","Breath","Ornament","Breath Amplification"},
      s = "Mask",
      toggle = false,
      delete = {
        common = false,
        rare = false,
        epic = false,
        legendary = false,
        mythic = false
      }
    },
    remote = {
      list = "",
      target = "Workspace",
      class = "BindableEvent"
    },
    alre = false
  }


local function getChildren(path,funct)
    for i,v in pairs(path:GetChildren()) do
      funct(v)
    end
  end
  
  local function hatch()
    getChildren(workspace.Maps,function(a)
        getChildren(a.Map.Eggs,function(array)
            game:GetService("ReplicatedStorage")["Remotes"]["ExtractHero"]:InvokeServer({["drawCardPlatformId"] = array:GetAttribute("Id"),["count"] = var.egg.count})
        end)
    end)
  end

  

  T4:Toggle{
    Name = "Reroll Amplification",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        while value do
            wait(1)  -- Add a 1-second delay
            local args = {
                [1] = 400001
            }

            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("RerollOrnament"):InvokeServer(unpack(args))
        end
    end
}

T4:Toggle{
    Name = "Reroll Awakening",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        while value do
            wait(1)  -- Add a 1-second delay
            local args = {
                [1] = 400002
            }

            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("RerollOrnament"):InvokeServer(unpack(args))
        end
    end
}

T4:Toggle{
    Name = "Reroll Talisman",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        while value do
            wait(1)  -- Add a 1-second delay
            local args = {
                [1] = 400005
            }

            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("RerollOrnament"):InvokeServer(unpack(args))
        end
    end
}



 T2:Toggle{
    Name = "Auto click",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        var.click = value
        local args = {
            [1] = {}
        }
        while wait() do
            if var.click == false then break end
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlayerClickAttackSkill"):FireServer(unpack(args))
            wait(0.01)  -- Adjust the wait time as needed
        end
    end
}
 

T2:Toggle{
    Name = "Auto collect dropped items",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        var.bring = value
        while wait() do
            if var.bring == false then break end
            
            -- Iterate through all the dropped items in 'Golds' folder
            for _, gold in ipairs(goldsFolder:GetChildren()) do
                if gold:IsA("BasePart") and gold.Name == "OutGold" then
                    -- Move the gold towards the player's HumanoidRootPart
                    gold.CFrame = playerHRP.CFrame * CFrame.new(0, 0, -2)
                end
            end
        end
    end
}

T1:Toggle{
    Name = "Auto claim online rewards",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        var.on = value
        while wait() do
            if var.on == false then break end
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimOnlineReward"]:InvokeServer({["id"] = "73"})
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimOnlineReward"]:InvokeServer({["id"] = "74"})
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimOnlineReward"]:InvokeServer({["id"] = "75"})
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimOnlineReward"]:InvokeServer({["id"] = "76"})
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimOnlineReward"]:InvokeServer({["id"] = "77"})
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimOnlineReward"]:InvokeServer({["id"] = "78"})
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimOnlineReward"]:InvokeServer({["id"] = "79"})
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimOnlineReward"]:InvokeServer({["id"] = "80"})

        end
    end
}

T1:Toggle{
    Name = "Auto equip best weapon every 1s",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        var.bw = value
        if value == true then
            game:GetService("ReplicatedStorage")["Remotes"]["EquipBestWeapon"]:FireServer()
        end
        
        while wait(1) do
            if var.bw == false then break end
            game:GetService("ReplicatedStorage")["Remotes"]["EquipBestWeapon"]:FireServer()
        end
    end
}

T1:Toggle{
    Name = "Auto claim 7 Days Login",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        var.cs = value
        while wait() do
            if var.cs == false then break end
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimSevenLoginReward"]:InvokeServer(1)
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimSevenLoginReward"]:InvokeServer(2)
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimSevenLoginReward"]:InvokeServer(3)
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimSevenLoginReward"]:InvokeServer(4)
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimSevenLoginReward"]:InvokeServer(5)
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimSevenLoginReward"]:InvokeServer(6)
            game:GetService("ReplicatedStorage")["Remotes"]["ClaimSevenLoginReward"]:InvokeServer(7)
        end
    end
}

T1:Toggle{
    Name = "Auto Reborn",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        var.reb = value
        while wait() do
            if var.reb == false then break end
            game:GetService("ReplicatedStorage")["Remotes"]["PlayerReborn"]:FireServer()
        end
    end
}

T1:Toggle{
    Name = "Auto fuse weapon",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        var.fuse = value
        while wait() do
            if var.fuse == false then break end
            game:GetService("ReplicatedStorage")["Remotes"]["FuseWeapon"]:FireServer()
        end
    end
}

T4:Toggle{
    Name = "Auto Hatch",
    StartingState = false,
    Description = "Hatch nearest EGG",
    Callback = function(value)
        var.egg.toggle = value
        while wait() do
            if var.egg.toggle == false then break end
            hatch()
        end
    end
}

T1:Toggle{
    Name = "Auto equip best hero every 1s",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        var.bh = value
        if value == true then
            game:GetService("ReplicatedStorage")["Remotes"]["AutoEquipBestHero"]:FireServer()
        end
        
        while wait(1) do
            if var.bh == false then break end
            game:GetService("ReplicatedStorage")["Remotes"]["AutoEquipBestHero"]:FireServer()
        end
    end
}


T3:Dropdown{
    Name = "Select map ID",
    StartingText = "Select...",
    Description = nil,
    Items = {
        {"Map 1", "50001"},
        {"Map 2", "50002"},
        {"Map 3", "50003"},
        {"Map 4", "50004"},
        {"Map 5", "50005"},
        {"Map 6", "50006"},
        {"Map 7", "50007"},
        {"Map 8", "50008"},
        {"Map 9", "50009"},
        {"Map 10", "50010"},
        {"Map 11", "50011"},
        {"Map 12", "50012"},
        {"Map 13", "50013"},
        {"Map 14", "50014"},
        {"Map 15", "50015"}
    },
    Callback = function(value)
        var.mapid = tonumber(value)
    end
}


T3:Button{
	Name = "Teleport to a selected map",
	Description = nil,
	Callback = function()
		game:GetService("ReplicatedStorage")["Remotes"]["LocalPlayerTeleport"]:FireServer({["mapId"] = var.mapid})
	end
}

T3:Button{
	Name = "Join Dungeon [ Bypass cooldown ]",
	Description = nil,
	Callback = function()
		game:GetService("ReplicatedStorage")["Remotes"]["LocalPlayerTeleport"]:FireServer({["mapId"] = 50016})
	end
}

T3:Button{
	Name = "Join Tower [ Bypass cooldown ]",
	Description = nil,
	Callback = function()
		game:GetService("ReplicatedStorage")["Remotes"]["LocalPlayerTeleport"]:FireServer({["mapId"] = 50107})
	end
}

T3:Button{
	Name = "Join Relic [ Bypass cooldown ]",
	Description = nil,
	Callback = function()
		game:GetService("ReplicatedStorage")["Remotes"]["LocalPlayerTeleport"]:FireServer({["mapId"] = 50900})
	end
}


local ab = Instance.new("TextLabel")

-- This will be the GUI toggle state
local antiAfkEnabled = true  -- Default is enabled

local bb = game:GetService('VirtualUser')

-- Function to start Anti-AFK behavior
local function startAntiAfk()
    game:GetService('Players').LocalPlayer.Idled:Connect(function()
        if antiAfkEnabled then
            bb:CaptureController()
            bb:ClickButton2(Vector2.new())
            ab.Text = "Roblox tried kicking you but I didn't let them!"
            wait(2)
            ab.Text = "Status: Active"
        end
    end)
end

-- Automatically enable Anti-AFK on startup
if antiAfkEnabled then
    startAntiAfk()
end

-- Toggle to control Anti-AFK
local function toggleAntiAfk(value)
    antiAfkEnabled = value
    if value then
        ab.Text = "Status: Active"
        startAntiAfk()  -- Restart the anti-afk if re-enabled
    else
        ab.Text = "Status: Disabled"
    end
end

-- GUI for toggle button
T1:Toggle{
    Name = "Enable Anti-AFK",
    StartingState = antiAfkEnabled,
    Description = "Prevent being kicked for inactivity.",
    Callback = toggleAntiAfk
}

local toggleScript = T2:Toggle{
    Name = "Auto Farm V1",
    StartingState = isScriptEnabled,
    Description = "TELEPORT TO ENEMY",
    Callback = function(state)
        isScriptEnabled = state
        if isScriptEnabled then
            loadstring(game:HttpGet("https://raw.githubusercontent.com/cuteeeee1587/Cute/refs/heads/main/AutoFarmV1"))()
            print("Custom script enabled.")
        else
            -- Properly handle stopping the script when toggling off
            getgenv().isScriptEnabled = false
            if getgenv().CustomScriptConnection then
                getgenv().CustomScriptConnection:Disconnect()
                getgenv().CustomScriptConnection = nil
                print("Custom script disabled.")
            end
        end
    end
}


T1:Toggle{
    Name = "Auto Pumpkin",
    StartingState = false,
    Description = "AUTOMATICALLY GET PUMPKIN BOX FROM ALL MAPS",
    Callback = function(state)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/cuteeeee1587/Cute/refs/heads/main/AutoPumpkin"))()
    end
}

-- Unlimited Diamond Toggle (T2)
T1:Toggle{
	Name = "Unlimited Diamond",
	StartingState = false,
	Description = "YOU SHOULD BE IN MAP 5",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/cuteeeee1587/Cute/refs/heads/main/DiamondKey"))()
	end
}


-- Auto SPIN


-- Auto Spin Diamond Key Toggle (T3)
do
	local autoSpinRunning = false

	T1:Toggle{
		Name = "Auto Spin Diamond Key",
		StartingState = false,
		Description = "Automatically rerolls the halo using diamond keys.",
		Callback = function(state)
			autoSpinRunning = state
			if state then
				task.spawn(function()
					while autoSpinRunning do
						local args = {
							[1] = 3
						}

						game:GetService("ReplicatedStorage")
							:WaitForChild("Remotes")
							:WaitForChild("RerollHalo")
							:InvokeServer(unpack(args))

						task.wait(0.1)
					end
				end)
			end
		end
	}
end

--- 

	T2:Toggle{
		Name = "AUTO FARM v2",
		StartingState = false,
		Description = "TELEPORT THE ENEMY IN FRONT OF YOU",
        Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/cuteeeee1587/Cute/refs/heads/main/AutofarmV2"))()
	end
}

T3:Button{
	Name = "Server Hop",
	Description = nil,
	Callback = function()
		local TeleportService = game:GetService("TeleportService")
		local HttpService = game:GetService("HttpService")
		local PlaceId = game.PlaceId
		local CurrentJobId = game.JobId

		local success, servers = pcall(function()
			local response = game:HttpGetAsync(
				"https://games.roblox.com/v1/games/"..PlaceId.."/servers/Public?sortOrder=Asc&limit=100"
			)
			return HttpService:JSONDecode(response)
		end)

		if success and servers and servers.data then
			for _, server in ipairs(servers.data) do
				if server.playing < server.maxPlayers and server.id ~= CurrentJobId then
					TeleportService:TeleportToPlaceInstance(PlaceId, server.id)
					return
				end
			end
		else
			warn("Failed to retrieve servers")
		end
	end
}


-- Rejoin

T3:Button{
	Name = "Rejoin Server",
	Description = nil,
	Callback = function()
		local TeleportService = game:GetService("TeleportService")
		local Players = game:GetService("Players")
		TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
	end
}

